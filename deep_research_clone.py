# -*- coding: utf-8 -*-
"""Deep Research Clone.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ehD7g5Sg-Kr9f5dvHfMrQJalEL54YWOz

# Setup
"""

from openai import OpenAI
import os, json, itertools
from IPython.display import display, Markdown

from google.colab import userdata

# Set OPENAI API KEY in the os
os.environ['OPENAI_API_KEY'] = userdata.get('ai_agents_openai')

client = OpenAI()

# Define model inputs
MODEL = "gpt-4.1"
MODEL_MINI = "gpt-4.1-mini"
TOOLS = [{"type": "web_search"}]
INCLUDE_RESULTS = ["web_search_call.results"]  # return raw search hits

# ---------- 1. get initial topic ----------
topic = input("Research topic: ").strip()

# ---------- 2. ask five clarifying questions ----------
developper_message = """You are a deep researcher"""
prompt = f"""
Ask 5 numbered clarifying questions to about: {topic}.
The goal of the questions is to understand the intended purpose of the research.
Reply only with the questions."""

clarify = client.responses.create(
    model=MODEL_MINI,
    input = prompt,
    instructions=developper_message,

)

# get the questions from the output and split by new line
questions = clarify.output[0].content[0].text.split("\n")
questions

# Ask each of the questions to the user
answers = []
for question in questions:
  # The built-in input() function can now be called correctly
  answer = input(f"{question}: ")
  answers.append(answer)

# Define input for the model
prompt_goals = f"""
Using the user answers {answers}, write a short goal sentence for the research about {topic}.
Output a JSON list of 5 web search queries that will reach it.
Format: {{\"goal\": \"...\", \"queries\": [\"q1\", ...]}}
"""

# ---------- 3. set goals + create first 5 searches ----------
goal_and_queries = client.responses.create(
    model=MODEL,
    previous_response_id=clarify.id,
    input=prompt_goals,
    instructions=
        developper_message,
)

goal_and_queries.output[0].content[0].text

plan = json.loads(goal_and_queries.output[0].content[0].text)
plan

goal = plan["goal"]
queries = plan["queries"]

queries[0]

"""# Web Search"""

resp = client.responses.create(
        model=MODEL,
        input=f"Search: {queries[0]}",
        tools=TOOLS,
        include=INCLUDE_RESULTS,
    )

resp.output[0].id

resp.output[1].content[0].annotations

def run_search(q):
    resp = client.responses.create(
        model=MODEL,
        input=f"Search: {q}",
        tools=TOOLS,
        include=INCLUDE_RESULTS,
    )
    return {"query": q,
            "resp_id": resp.output[0].id,
            "research_output": resp.output[1].content[0].text}

run_search(queries[0])

def evaluate(collected):
    # Ask the model if we’re done. Return bool.
    review = client.responses.create(
        model=MODEL,
        input=[
            {"role": "developer", "content": f"Research goal: {goal}"},
            {"role": "assistant", "content": json.dumps(collected)},
            {"role": "user", "content":
                "Does this information fully satisfy the goal? "
                "Answer Yes or No only."}
        ],
        instructions=developper_message,
    )
    return "yes" in review.output[0].content[0].text.lower()

collected = []
for _ in itertools.count():                      # open-ended loop
    for q in queries:
        collected.append(run_search(q))
    if evaluate(collected):
        break

    # ask for 5 more searches
    more = client.responses.create(
        model=MODEL,
        input=[
            {"role": "assistant", "content": f"Current data: {json.dumps(collected)}"},
            {"role": "user",
             "content": ("We still haven’t met the goal. Give 5 more, new, "
                         "high-value web search queries only as a JSON list.")}
        ],
        previous_response_id=goal_and_queries.id
    )
    queries = json.loads(more.output[0].content[0].text)

# ---------- 5. final synthesis with citations ----------
final = client.responses.create(
    model=MODEL,
    input=[
        {"role": "developer", "content": (f"Write a complete answer that meets the goal: {goal}. "
                     "Cite sources inline using [n] and append a reference "
                     "list mapping [n] to url.")},
        {"role": "assistant", "content": json.dumps(collected)},
    ],
    instructions=developper_message,
)
print("\n=== FINAL REPORT ===\n")
display(Markdown(final.output[0].content[0].text))

!pip freeze